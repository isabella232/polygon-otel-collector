// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/model/pdata"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// MetricsSettings provides settings for polygonreceiver metrics.
type MetricsSettings struct {
	PolygonLastBlock        MetricSettings `mapstructure:"polygon.last_block"`
	PolygonLastBlockTime    MetricSettings `mapstructure:"polygon.last_block_time"`
	PolygonSubmitCheckpoint MetricSettings `mapstructure:"polygon.submit_checkpoint"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		PolygonLastBlock: MetricSettings{
			Enabled: true,
		},
		PolygonLastBlockTime: MetricSettings{
			Enabled: true,
		},
		PolygonSubmitCheckpoint: MetricSettings{
			Enabled: true,
		},
	}
}

type metricPolygonLastBlock struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills polygon.last_block metric with initial data.
func (m *metricPolygonLastBlock) init() {
	m.data.SetName("polygon.last_block")
	m.data.SetDescription("The current block number.")
	m.data.SetUnit("block")
	m.data.SetDataType(pdata.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricPolygonLastBlock) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val int64, chainAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Chain, pdata.NewAttributeValueString(chainAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricPolygonLastBlock) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricPolygonLastBlock) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricPolygonLastBlock(settings MetricSettings) metricPolygonLastBlock {
	m := metricPolygonLastBlock{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricPolygonLastBlockTime struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills polygon.last_block_time metric with initial data.
func (m *metricPolygonLastBlockTime) init() {
	m.data.SetName("polygon.last_block_time")
	m.data.SetDescription("The average block time.")
	m.data.SetUnit("milliseconds")
	m.data.SetDataType(pdata.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricPolygonLastBlockTime) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val int64, chainAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Chain, pdata.NewAttributeValueString(chainAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricPolygonLastBlockTime) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricPolygonLastBlockTime) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricPolygonLastBlockTime(settings MetricSettings) metricPolygonLastBlockTime {
	m := metricPolygonLastBlockTime{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricPolygonSubmitCheckpoint struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills polygon.submit_checkpoint metric with initial data.
func (m *metricPolygonSubmitCheckpoint) init() {
	m.data.SetName("polygon.submit_checkpoint")
	m.data.SetDescription("Latest checkpoint transaction.")
	m.data.SetUnit("1")
	m.data.SetDataType(pdata.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricPolygonSubmitCheckpoint) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val int64, chainAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Chain, pdata.NewAttributeValueString(chainAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricPolygonSubmitCheckpoint) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricPolygonSubmitCheckpoint) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricPolygonSubmitCheckpoint(settings MetricSettings) metricPolygonSubmitCheckpoint {
	m := metricPolygonSubmitCheckpoint{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                     pdata.Timestamp
	metricPolygonLastBlock        metricPolygonLastBlock
	metricPolygonLastBlockTime    metricPolygonLastBlockTime
	metricPolygonSubmitCheckpoint metricPolygonSubmitCheckpoint
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pdata.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(settings MetricsSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                     pdata.NewTimestampFromTime(time.Now()),
		metricPolygonLastBlock:        newMetricPolygonLastBlock(settings.PolygonLastBlock),
		metricPolygonLastBlockTime:    newMetricPolygonLastBlockTime(settings.PolygonLastBlockTime),
		metricPolygonSubmitCheckpoint: newMetricPolygonSubmitCheckpoint(settings.PolygonSubmitCheckpoint),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// Emit appends generated metrics to a pdata.MetricsSlice and updates the internal state to be ready for recording
// another set of data points. This function will be doing all transformations required to produce metric representation
// defined in metadata and user settings, e.g. delta/cumulative translation.
func (mb *MetricsBuilder) Emit(metrics pdata.MetricSlice) {
	mb.metricPolygonLastBlock.emit(metrics)
	mb.metricPolygonLastBlockTime.emit(metrics)
	mb.metricPolygonSubmitCheckpoint.emit(metrics)
}

// RecordPolygonLastBlockDataPoint adds a data point to polygon.last_block metric.
func (mb *MetricsBuilder) RecordPolygonLastBlockDataPoint(ts pdata.Timestamp, val int64, chainAttributeValue string) {
	mb.metricPolygonLastBlock.recordDataPoint(mb.startTime, ts, val, chainAttributeValue)
}

// RecordPolygonLastBlockTimeDataPoint adds a data point to polygon.last_block_time metric.
func (mb *MetricsBuilder) RecordPolygonLastBlockTimeDataPoint(ts pdata.Timestamp, val int64, chainAttributeValue string) {
	mb.metricPolygonLastBlockTime.recordDataPoint(mb.startTime, ts, val, chainAttributeValue)
}

// RecordPolygonSubmitCheckpointDataPoint adds a data point to polygon.submit_checkpoint metric.
func (mb *MetricsBuilder) RecordPolygonSubmitCheckpointDataPoint(ts pdata.Timestamp, val int64, chainAttributeValue string) {
	mb.metricPolygonSubmitCheckpoint.recordDataPoint(mb.startTime, ts, val, chainAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pdata.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
	// Chain (The name of a chain.)
	Chain string
}{
	"chain",
}

// A is an alias for Attributes.
var A = Attributes
